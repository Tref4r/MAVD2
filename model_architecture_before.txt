Multimodal(
  (embedding): Sequential(
    (0): Linear(in_features=224, out_features=112, bias=True)
    (1): ReLU()
    (2): Dropout(p=0.0, inplace=False)
    (3): Linear(in_features=112, out_features=64, bias=True)
    (4): ReLU()
  )
  (tcn): TCNModel(
    (tcn): TemporalConvNet(
      (network): Sequential(
        (0): TemporalBlock(
          (conv1): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(1,))
          (chomp1): Chomp1d()
          (relu1): ReLU()
          (dropout1): Dropout(p=0.0, inplace=False)
          (conv2): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(1,))
          (chomp2): Chomp1d()
          (relu2): ReLU()
          (dropout2): Dropout(p=0.0, inplace=False)
          (net): Sequential(
            (0): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(1,))
            (1): Chomp1d()
            (2): ReLU()
            (3): Dropout(p=0.0, inplace=False)
            (4): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(1,))
            (5): Chomp1d()
            (6): ReLU()
            (7): Dropout(p=0.0, inplace=False)
          )
          (relu): ReLU()
        )
        (1): TemporalBlock(
          (conv1): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(2,), dilation=(2,))
          (chomp1): Chomp1d()
          (relu1): ReLU()
          (dropout1): Dropout(p=0.0, inplace=False)
          (conv2): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(2,), dilation=(2,))
          (chomp2): Chomp1d()
          (relu2): ReLU()
          (dropout2): Dropout(p=0.0, inplace=False)
          (net): Sequential(
            (0): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(2,), dilation=(2,))
            (1): Chomp1d()
            (2): ReLU()
            (3): Dropout(p=0.0, inplace=False)
            (4): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(2,), dilation=(2,))
            (5): Chomp1d()
            (6): ReLU()
            (7): Dropout(p=0.0, inplace=False)
          )
          (relu): ReLU()
        )
        (2): TemporalBlock(
          (conv1): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(4,), dilation=(4,))
          (chomp1): Chomp1d()
          (relu1): ReLU()
          (dropout1): Dropout(p=0.0, inplace=False)
          (conv2): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(4,), dilation=(4,))
          (chomp2): Chomp1d()
          (relu2): ReLU()
          (dropout2): Dropout(p=0.0, inplace=False)
          (net): Sequential(
            (0): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(4,), dilation=(4,))
            (1): Chomp1d()
            (2): ReLU()
            (3): Dropout(p=0.0, inplace=False)
            (4): Conv1d(64, 64, kernel_size=(2,), stride=(1,), padding=(4,), dilation=(4,))
            (5): Chomp1d()
            (6): ReLU()
            (7): Dropout(p=0.0, inplace=False)
          )
          (relu): ReLU()
        )
      )
    )
  )
  (mil): MIL(
    (regressor): Sequential(
      (0): Linear(in_features=64, out_features=128, bias=True)
      (1): ReLU()
      (2): Dropout(p=0.0, inplace=False)
      (3): Linear(in_features=128, out_features=32, bias=True)
      (4): Dropout(p=0.0, inplace=False)
      (5): Linear(in_features=32, out_features=1, bias=True)
      (6): Sigmoid()
    )
  )
  (gated_fusion): GatedMultimodalFusion(
    (gate): Sequential(
      (0): Linear(in_features=64, out_features=64, bias=True)
      (1): Sigmoid()
    )
  )
  (residual_fusion): ResidualFusionBlock(
    (fc): Linear(in_features=64, out_features=64, bias=True)
  )
)